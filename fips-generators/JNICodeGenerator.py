
import os, sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))) + '/mod')

import subprocess
import genutil as util
import yaml
import re

from mod import log
from tools import javah, maven

Version = 1

#-------------------------------------------------------------------------------
def generateSource(sourceFiles, sourcePath) :
    f = open(sourcePath, 'w')
    f.write('/* auto-generated by JNICodeGenerator */\n')
    for src in sourceFiles :
        f.write('#include \"{}.cpp\"\n'.format(src))
    f.close()

#-------------------------------------------------------------------------------
def generate(input, out_src, out_hdr) :
    if util.isDirty(Version, [input], [out_src, out_hdr]) :
        with open(input, 'r') as f :
            desc = yaml.load(f)

        _env = os.environ.copy()
        _env["PATH"] = os.path.dirname(javah.get_javah_path()) + os.pathsep + _env["PATH"]

        inputPath = os.path.dirname(input)
        generatorPath = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

        jarFile = '{}/fips-generators/target/fips-jnigen-jar-with-dependencies.jar'.format(generatorPath)
        mainClass = 'com.codedisaster.jnigen.JNICodeGenerator'

        sourcePath = os.path.normpath(inputPath + '/' + desc['source-path'])
        classesPath = os.path.normpath(inputPath + '/' + desc['class-path'])

        if 'includes' in desc :
            includes = ['--includes'] + desc['includes']
        else :
            includes = []

        if 'excludes' in desc :
            excludes = ['--excludes'] + desc['excludes']
        else :
            excludes = []

        cmdLine = ['java', '-cp',
            os.path.relpath(jarFile, os.getcwd()),
            os.path.relpath(mainClass, os.getcwd()),
            os.path.relpath(sourcePath, os.getcwd()),
            os.path.relpath(classesPath, os.getcwd()),
            os.path.relpath(inputPath, os.getcwd())]
        cmdLine += includes
        cmdLine += excludes

        srcFiles = []

        try:
            output = subprocess.check_output(cmdLine, env=_env, stderr=subprocess.STDOUT)
            output = output.decode('utf-8')

            # scans jnigen output to create list of generated files
            expr = re.compile("C/C\\+\\+ for '(.*)'")
            srcFilePaths = expr.findall(output)
            for srcFile in srcFilePaths :
                relPath = os.path.relpath(srcFile, sourcePath)
                relPath = relPath.replace('.java', '').replace(os.path.sep, '.')
                srcFiles = srcFiles + [relPath]

        except (OSError, subprocess.CalledProcessError) :
            log.failed('JNICodeGenerator', 'Error!')
            raise OSError

        generateSource(srcFiles, out_src)