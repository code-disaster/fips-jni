
import os, sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))) + '/mod')

import subprocess
import genutil as util
import yaml

from mod import log
from tools import javah, maven

Version = 1

#-------------------------------------------------------------------------------
def generateSource(desc, sourcePath) :
    f = open(sourcePath, 'w')
    f.write('/* auto-generated by JNICodeGenerator */\n')
    for src in desc['source-files'] :
        f.write('#include \"{}.cpp\"\n'.format(src))
    f.close()

#-------------------------------------------------------------------------------
def generate(input, out_src, out_hdr) :
    if util.isDirty(Version, [input], [out_src, out_hdr]) :
        with open(input, 'r') as f :
            desc = yaml.load(f)

        _env = os.environ.copy()
        _env["PATH"] = os.path.dirname(javah.get_javah_path()) + os.pathsep + _env["PATH"]

        input_path = os.path.dirname(input)
        generator_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

        jar_file = '{}/fips-generators/target/fips-jnigen-jar-with-dependencies.jar'.format(generator_path)
        main_class = 'com.codedisaster.jnigen.JNICodeGenerator'

        source_path = input_path + '/' + desc['source-path']
        classes_path = input_path + '/' + desc['class-path']

        try:
            subprocess.check_call(['java', '-cp', jar_file, main_class,
                source_path, classes_path, input_path], env=_env, stderr=subprocess.STDOUT)
        except OSError, subprocess.CalledProcessError :
            log.failed('JNICodeGenerator', 'Error!')
            raise OSError

        generateSource(desc, out_src)